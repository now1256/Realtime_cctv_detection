import cv2
import time
import numpy as np
import multiprocessing as mp
import onnxruntime

# RTSP Ï£ºÏÜå
rtsp_url = "rtsp://192.168.0.161:554/stream1"

# COCO ÌÅ¥ÎûòÏä§ (80Í∞ú)
CLASS_NAMES = [
    'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck',
    'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench',
    'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra',
    'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
    'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove',
    'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',
    'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange',
    'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
    'potted plant', 'bed', 'dining table', 'toilet', 'TV', 'laptop', 'mouse',
    'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink',
    'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier',
    'toothbrush'
]

# Ï∂îÎ°† ÌîÑÎ°úÏÑ∏Ïä§ Ìï®Ïàò
def detect_worker(input_queue):
    session = onnxruntime.InferenceSession("yolov8n.onnx", providers=["DmlExecutionProvider"])
    input_name = session.get_inputs()[0].name

    while True:
        frame = input_queue.get()
        if frame is None:
            break

        # Ï†ÑÏ≤òÎ¶¨
        img = cv2.resize(frame, (640, 640))
        img_rgb = img[..., ::-1].transpose(2, 0, 1).astype(np.float32) / 255.0
        img_input = np.expand_dims(img_rgb, axis=0)

        # Ï∂îÎ°†
        outputs = session.run(None, {input_name: img_input})[0]  # (1, 300, 6)
        for det in outputs[0]:
            x1, y1, x2, y2, conf, class_id = det
            if conf < 0.5:
                continue

            label = CLASS_NAMES[int(class_id)]
            print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] üü¢ Í∞êÏßÄÎê®: {label} ({conf:.2f}) "
                  f"‚Üí Ï¢åÌëú: [{int(x1)}, {int(y1)}, {int(x2)}, {int(y2)}]", flush=True)

# Î©îÏù∏ ÌîÑÎ°úÏÑ∏Ïä§ (RTSP Ïä§Ìä∏Î¶º ÏàòÏã†)
def main():
    mp.set_start_method('spawn', force=True)  # Windows Ìò∏Ìôò

    input_queue = mp.Queue(maxsize=5)
    worker = mp.Process(target=detect_worker, args=(input_queue,))
    worker.start()

    cap = cv2.VideoCapture(rtsp_url)
    if not cap.isOpened():
        print("‚ùå RTSP Ïó∞Í≤∞ Ïã§Ìå®")
        return

    print("‚úÖ RTSP Ïó∞Í≤∞ ÏÑ±Í≥µ. ÌîÑÎ†àÏûÑ ÏàòÏã† ÏãúÏûë...")

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("‚ö†Ô∏è ÌîÑÎ†àÏûÑ ÏàòÏã† Ïã§Ìå®")
                continue

            if not input_queue.full():
                input_queue.put(frame)

    except KeyboardInterrupt:
        print("üõë Ctrl+C Í∞êÏßÄ: Ï¢ÖÎ£å ÏöîÏ≤≠Îê®", flush=True)

    finally:
        print("‚õî Ï¢ÖÎ£å Ï§ë...", flush=True)
        try:
            input_queue.put_nowait(None)
        except:
            pass

        time.sleep(1)

        if worker.is_alive():
            print("‚ö†Ô∏è Í∞êÏßÄ ÌîÑÎ°úÏÑ∏Ïä§ Í∞ïÏ†ú Ï¢ÖÎ£å Ï§ë...", flush=True)
            worker.terminate()

        worker.join()
        cap.release()
        print("‚úÖ Ï†ÑÏ≤¥ Ï¢ÖÎ£å ÏôÑÎ£å", flush=True)

if __name__ == "__main__":
    main()
